# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineObject2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggressivity=None, behaviour=None):  # noqa: E501
        """InlineObject2 - a model defined in OpenAPI

        :param aggressivity: The aggressivity of this InlineObject2.  # noqa: E501
        :type aggressivity: int
        :param behaviour: The behaviour of this InlineObject2.  # noqa: E501
        :type behaviour: int
        """
        self.openapi_types = {
            'aggressivity': int,
            'behaviour': int
        }

        self.attribute_map = {
            'aggressivity': 'aggressivity',
            'behaviour': 'behaviour'
        }

        self._aggressivity = aggressivity
        self._behaviour = behaviour

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object_2 of this InlineObject2.  # noqa: E501
        :rtype: InlineObject2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggressivity(self):
        """Gets the aggressivity of this InlineObject2.

        the probability(0-100%) that the antagonist will attack the containers  # noqa: E501

        :return: The aggressivity of this InlineObject2.
        :rtype: int
        """
        return self._aggressivity

    @aggressivity.setter
    def aggressivity(self, aggressivity):
        """Sets the aggressivity of this InlineObject2.

        the probability(0-100%) that the antagonist will attack the containers  # noqa: E501

        :param aggressivity: The aggressivity of this InlineObject2.
        :type aggressivity: int
        """
        if aggressivity is None:
            raise ValueError("Invalid value for `aggressivity`, must not be `None`")  # noqa: E501

        self._aggressivity = aggressivity

    @property
    def behaviour(self):
        """Gets the behaviour of this InlineObject2.

        the probability(0-100%) that the antagonist will shut down a container insted of applying a packet loss(packet loss is the remaining probability)  # noqa: E501

        :return: The behaviour of this InlineObject2.
        :rtype: int
        """
        return self._behaviour

    @behaviour.setter
    def behaviour(self, behaviour):
        """Sets the behaviour of this InlineObject2.

        the probability(0-100%) that the antagonist will shut down a container insted of applying a packet loss(packet loss is the remaining probability)  # noqa: E501

        :param behaviour: The behaviour of this InlineObject2.
        :type behaviour: int
        """
        if behaviour is None:
            raise ValueError("Invalid value for `behaviour`, must not be `None`")  # noqa: E501

        self._behaviour = behaviour
