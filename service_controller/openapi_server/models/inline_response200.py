# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id=None, managed=None, status=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI

        :param container_id: The container_id of this InlineResponse200.  # noqa: E501
        :type container_id: str
        :param managed: The managed of this InlineResponse200.  # noqa: E501
        :type managed: bool
        :param status: The status of this InlineResponse200.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'container_id': str,
            'managed': bool,
            'status': str
        }

        self.attribute_map = {
            'container_id': 'containerID',
            'managed': 'managed',
            'status': 'status'
        }

        self._container_id = container_id
        self._managed = managed
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self):
        """Gets the container_id of this InlineResponse200.


        :return: The container_id of this InlineResponse200.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this InlineResponse200.


        :param container_id: The container_id of this InlineResponse200.
        :type container_id: str
        """
        if container_id is None:
            raise ValueError("Invalid value for `container_id`, must not be `None`")  # noqa: E501

        self._container_id = container_id

    @property
    def managed(self):
        """Gets the managed of this InlineResponse200.


        :return: The managed of this InlineResponse200.
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this InlineResponse200.


        :param managed: The managed of this InlineResponse200.
        :type managed: bool
        """

        self._managed = managed

    @property
    def status(self):
        """Gets the status of this InlineResponse200.


        :return: The status of this InlineResponse200.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200.


        :param status: The status of this InlineResponse200.
        :type status: str
        """

        self._status = status
